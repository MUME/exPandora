#############################################################################
# Makefile for building: ../pandora
# Generated by qmake (1.07a) (Qt 3.3.3) on: Fri Jan  7 21:29:01 2005
# Project:  pandora.pro
# Template: app
# Command: $(QMAKE) -o Makefile pandora.pro
#############################################################################

####### Compiler, tools and options

CC       = cc
CXX      = c++
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -Wall -W -g  -DQT_SHARED -DQT_ACCESSIBILITY_SUPPORT -DQT_TABLET_SUPPORT -DQT_NO_DEBUG -DQT_THREAD_SUPPORT
CXXFLAGS = -pipe -Wall -W -g -O2 -I/usr/include/libxml2  -DQT_SHARED -DQT_ACCESSIBILITY_SUPPORT -DQT_TABLET_SUPPORT -DQT_NO_DEBUG -DQT_THREAD_SUPPORT
LEXFLAGS = 
YACCFLAGS= -d
INCPATH  = -I/Users/alve/Library/qt/mkspecs/macx-g++ -I. -I$(QTDIR)/include -I/System/Library/Frameworks/OpenGL.framework/Versions/A/Headers -I/System/Library/Frameworks/AGL.framework/Versions/A/Headers -Imoc/
LINK     = c++
LFLAGS   = -headerpad_max_install_names -prebind
LIBS     = $(SUBLIBS) -L$(QTDIR)/lib -lxml2 -lpthread -lz -liconv -lm -lqt-mt -framework OpenGL -framework AGL
AR       = ar cq
RANLIB   = ranlib -s
MOC      = $(QTDIR)/bin/moc
UIC      = $(QTDIR)/bin/uic
QMAKE    = qmake
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= cp -f
COPY_DIR = cp -f -r
INSTALL_FILE= $(COPY_FILE)
INSTALL_DIR = $(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJECTS_DIR = obj/

####### Files

HEADERS = config_reader.h \
		defines.h \
		dispatch.h \
		engine.h \
		event.h \
		exits.h \
		forwarder.h \
		renderer.h \
		rooms.h \
		stacks.h \
		struct.h \
		tree.h \
		userfunc.h \
		utils.h \
		xml2.h
SOURCES = auda.cpp \
		config_reader.cpp \
		dispatch.cpp \
		engine.cpp \
		event.cpp \
		exits.cpp \
		forwarder.cpp \
		renderer.cpp \
		rooms.cpp \
		stacks.cpp \
		tree.cpp \
		userfunc.cpp \
		utils.cpp \
		xml2.cpp \
		interface.cpp
OBJECTS = obj/auda.o \
		obj/config_reader.o \
		obj/dispatch.o \
		obj/engine.o \
		obj/event.o \
		obj/exits.o \
		obj/forwarder.o \
		obj/renderer.o \
		obj/rooms.o \
		obj/stacks.o \
		obj/tree.o \
		obj/userfunc.o \
		obj/utils.o \
		obj/xml2.o \
		obj/interface.o
FORMS = 
UICDECLS = 
UICIMPLS = 
SRCMOC   = moc/moc_renderer.cpp
OBJMOC = obj/moc_renderer.o
DIST	   = pandora.pro
QMAKE_TARGET = pandora
DESTDIR  = ../
TARGET   = ../pandora

first: all
####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(UICDECLS) $(OBJECTS) $(OBJMOC)  
	test -d ../ || mkdir -p ../
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(OBJCOMP) $(LIBS)

mocables: $(SRCMOC)
uicables: $(UICDECLS) $(UICIMPLS)

$(MOC): 
	( cd $(QTDIR)/src/moc && $(MAKE) )

Makefile: pandora.pro  /Users/alve/Library/qt/mkspecs/macx-g++/qmake.conf ../../../Library/qt/lib/libqt-mt.prl
	$(QMAKE) -o Makefile pandora.pro
qmake: 
	@$(QMAKE) -o Makefile pandora.pro

dist: 
	@mkdir -p obj/pandora && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) obj/pandora/ && ( cd `dirname obj/pandora` && $(TAR) pandora.tar pandora && $(GZIP) pandora.tar ) && $(MOVE) `dirname obj/pandora`/pandora.tar.gz . && $(DEL_FILE) -r obj/pandora

mocclean:
	-$(DEL_FILE) $(OBJMOC)
	-$(DEL_FILE) $(SRCMOC)

uiclean:

yaccclean:
lexclean:
clean: mocclean
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) ../$(TARGET) $(TARGET)


FORCE:

####### Compile

obj/auda.o: auda.cpp defines.h \
		struct.h \
		rooms.h \
		xml2.h \
		dispatch.h \
		renderer.h \
		event.h \
		stacks.h \
		forwarder.h \
		config_reader.h \
		utils.h \
		engine.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/auda.o auda.cpp

obj/config_reader.o: config_reader.cpp defines.h \
		struct.h \
		utils.h \
		event.h \
		dispatch.h \
		rooms.h \
		renderer.h \
		config_reader.h \
		engine.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/config_reader.o config_reader.cpp

obj/dispatch.o: dispatch.cpp defines.h \
		struct.h \
		tree.h \
		stacks.h \
		xml2.h \
		event.h \
		dispatch.h \
		utils.h \
		engine.h \
		userfunc.h \
		forwarder.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/dispatch.o dispatch.cpp

obj/engine.o: engine.cpp defines.h \
		struct.h \
		event.h \
		stacks.h \
		dispatch.h \
		exits.h \
		forwarder.h \
		renderer.h \
		utils.h \
		engine.h \
		rooms.h \
		tree.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/engine.o engine.cpp

obj/event.o: event.cpp defines.h \
		struct.h \
		event.h \
		dispatch.h \
		stacks.h \
		forwarder.h \
		utils.h \
		engine.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/event.o event.cpp

obj/exits.o: exits.cpp defines.h \
		struct.h \
		exits.h \
		dispatch.h \
		rooms.h \
		stacks.h \
		event.h \
		forwarder.h \
		utils.h \
		engine.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/exits.o exits.cpp

obj/forwarder.o: forwarder.cpp defines.h \
		dispatch.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/forwarder.o forwarder.cpp

obj/renderer.o: renderer.cpp defines.h \
		struct.h \
		renderer.h \
		stacks.h \
		utils.h \
		rooms.h \
		userfunc.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/renderer.o renderer.cpp

obj/rooms.o: rooms.cpp defines.h \
		struct.h \
		rooms.h \
		tree.h \
		stacks.h \
		utils.h \
		dispatch.h \
		renderer.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/rooms.o rooms.cpp

obj/stacks.o: stacks.cpp defines.h \
		renderer.h \
		dispatch.h \
		forwarder.h \
		utils.h \
		stacks.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/stacks.o stacks.cpp

obj/tree.o: tree.cpp defines.h \
		tree.h \
		utils.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/tree.o tree.cpp

obj/userfunc.o: userfunc.cpp defines.h \
		struct.h \
		dispatch.h \
		stacks.h \
		forwarder.h \
		utils.h \
		userfunc.h \
		xml2.h \
		event.h \
		rooms.h \
		engine.h \
		tree.h \
		renderer.h \
		exits.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/userfunc.o userfunc.cpp

obj/utils.o: utils.cpp defines.h \
		utils.h \
		forwarder.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/utils.o utils.cpp

obj/xml2.o: xml2.cpp defines.h \
		struct.h \
		rooms.h \
		utils.h \
		dispatch.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/xml2.o xml2.cpp

obj/interface.o: interface.cpp defines.h \
		struct.h \
		renderer.h \
		stacks.h \
		utils.h \
		rooms.h \
		userfunc.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/interface.o interface.cpp

obj/moc_renderer.o: moc/moc_renderer.cpp  renderer.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/moc_renderer.o moc/moc_renderer.cpp

moc/moc_renderer.cpp: $(MOC) renderer.h
	$(MOC) renderer.h -o moc/moc_renderer.cpp

####### Install

install:  

uninstall:  

