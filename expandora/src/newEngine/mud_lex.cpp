#define yyFlexLexer MudFlexLexer
#define yyalloc Mudalloc
#define yyrealloc Mudrealloc
#define yyfree Mudfree
#define yylineno Mudlineno

#line 8 "lex.mud.c"
#define  YY_INT_ALIGNED short int


/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 27
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif


#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <stdlib.h>
/* end standard C++ headers. */

#ifdef __cplusplus

/* C++ compilers don't understand traditional function definitions. */
#ifdef YY_TRADITIONAL_FUNC_DEFS
#undef YY_TRADITIONAL_FUNC_DEFS
#endif

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* We're not in a C++ compiler, so by default,
   we generate C99 function defs, unless you explicitly ask
   for traditional defs by defining YY_TRADITIONAL_FUNC_DEFS */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* For compilers that can't handle prototypes.
 * e.g.,
 * The function prototype
 *    int foo(int x, char* y);
 *
 * ...should be written as
 *    int foo YY_PARAMS((int x, char* y));
 *
 * ...which could possibly generate
 *    int foo ();
 */
#ifdef YY_NO_PROTOS
#define YY_PARAMS(proto) ()
#else
#define YY_PARAMS(proto) proto
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)



/* Define these macros to be no-ops. */
#define YY_G(var) (var)
#define YY_PROTO_LAST_ARG
#define YY_PROTO_ONLY_ARG void
#define YY_DEF_LAST_ARG
#ifdef YY_TRADITIONAL_FUNC_DEFS
#define YY_DEF_ONLY_ARG
#else
#define YY_DEF_ONLY_ARG void
#endif
#define YY_DECL_LAST_ARG
#define YY_CALL_LAST_ARG
#define YY_CALL_ONLY_ARG



/* For compilers that need traditional function definitions.
 * e.g.,
 * The function prototype taking 2 arguments
 *    int foo (int x, char* y)
 *
 * ...should be written as
 *    int foo YYFARGS2(int,x, char*,y)
 *
 * ...which could possibly generate
 *    int foo (x,y,yyscanner)
 *        int x;
 *        char * y;
 *        yyscan_t yyscanner;
 */
#ifdef YY_TRADITIONAL_FUNC_DEFS
/* Generate traditional function defs */
#define YYFARGS0(v) (YY_DEF_ONLY_ARG) YY_DECL_LAST_ARG
#define YYFARGS1(t1,n1) (n1 YY_DEF_LAST_ARG) t1 n1; YY_DECL_LAST_ARG
#define YYFARGS2(t1,n1,t2,n2) (n1,n2 YY_DEF_LAST_ARG) t1 n1; t2 n2; YY_DECL_LAST_ARG
#define YYFARGS3(t1,n1,t2,n2,t3,n3) (n1,n2,n3 YY_DEF_LAST_ARG) t1 n1; t2 n2; t3 n3; YY_DECL_LAST_ARG
#else
/* Generate C99 function defs. */
#define YYFARGS0(v) (YY_DEF_ONLY_ARG)
#define YYFARGS1(t1,n1) (t1 n1 YY_DEF_LAST_ARG)
#define YYFARGS2(t1,n1,t2,n2) (t1 n1,t2 n2 YY_DEF_LAST_ARG)
#define YYFARGS3(t1,n1,t2,n2,t3,n3) (t1 n1,t2 n2,t3 n3 YY_DEF_LAST_ARG)
#endif

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN YY_G(yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((YY_G(yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin YY_CALL_LAST_ARG )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif


#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;


#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#ifdef YY_USE_LINENO
/* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
 *       access to the local variable yy_act. Since yyless() is a macro, it would break
 *       existing scanners that call yyless() from OUTSIDE yylex. 
 *       One obvious solution it to make yy_act a global. I tried that, and saw
 *       a 5% performance hit in a non-yylineno scanner, because yy_act is
 *       normally declared as a register variable-- so it's not worth it.
 */
#define  YY_LESS_LINENO(n) \
        do { \
			int yyl;\
			for ( yyl = n; yyl < yyleng; ++yyl )\
				if ( yytext[yyl] == '\n' )\
					--yylineno;\
        }while(0)
#else
#define YY_LESS_LINENO(n)
#endif

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = YY_G(yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		YY_G(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, YY_G(yytext_ptr) YY_CALL_LAST_ARG )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;


	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer

#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */

void *yyalloc YY_PARAMS(( yy_size_t YY_PROTO_LAST_ARG ));
void *yyrealloc YY_PARAMS(( void *, yy_size_t YY_PROTO_LAST_ARG ));
void yyfree YY_PARAMS(( void * YY_PROTO_LAST_ARG ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_G(yy_current_buffer) ) \
		YY_G(yy_current_buffer) =    \
            yy_create_buffer( yyin, YY_BUF_SIZE YY_CALL_LAST_ARG); \
	YY_G(yy_current_buffer)->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_G(yy_current_buffer) ) \
		YY_G(yy_current_buffer) =    \
            yy_create_buffer( yyin, YY_BUF_SIZE YY_CALL_LAST_ARG); \
	YY_G(yy_current_buffer)->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_G(yy_current_buffer)->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP
#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
typedef unsigned char YY_CHAR;
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */
#define yytext_ptr yytext
#define YY_INTERACTIVE
#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int MudLexer::yylex()

#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	YY_G(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	YY_G(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	YY_G(yy_c_buf_p) = yy_cp;

#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
#define YY_NUM_RULES 64
#define YY_END_OF_BUFFER 65
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[909] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       65,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   30,   64,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   64,   64,
       64,   64,   46,   64,   64,   64,   64,   64,   64,   64,
       64,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   63,   64,   64,   64,   64,   64,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   32,   31,    0,    0,   47,   48,   41,    0,   45,

       42,    0,    0,    0,    0,    0,   39,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   43,   44,
        0,    0,    0,    0,    0,    0,    0,   50,   55,   53,
       59,   51,   60,   54,   61,   58,   57,   49,   52,   56,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   40,   38,    0,    0,   37,
        0,    0,    1,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   34,    0,   36,   35,    0,    0,    0,
       62,    2,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   33,    0,    0,   28,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   29,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    4,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   17,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    8,    0,    0,    0,    0,    0,    0,    9,    0,
        0,    0,    0,    5,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   24,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       14,   19,    0,    0,    0,    7,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   18,    0,    0,
       21,    0,    0,    0,    0,    6,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   12,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
        0,    0,    0,    0,    0,   16,    0,    0,    0,    0,
        0,    0,   25,   15,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   13,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   20,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       22,    0,    0,   23,    0,    0,   10,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    1,    1,    1,
        1,    5,    6,    1,    7,    1,    8,    1,    9,   10,
       11,    1,   12,   13,    1,   14,    1,   15,   16,   17,
       18,   19,   16,   16,   16,   16,   16,   20,    1,   21,
       22,   23,   24,    1,   25,    1,    1,    1,   26,    1,
        1,    1,   27,    1,    1,    1,   28,   29,   30,    1,
        1,    1,    1,   31,   32,    1,   33,    1,   34,    1,
       35,    1,   36,    1,    1,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,    1,   53,   54,   55,   56,    1,   57,   58,
       59,    1,    1,    1,    1,   60,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[61] =
    {   0,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[930] =
    {   0,
        0,   31,   64,   97,  130,    0,  186,  219,  250,    0,
     1165, 1166, 1129, 1114,    3,    4, 1114,   14, 1124,    0,
     1109, 1115, 1107, 1166, 1154, 1154, 1120, 1105,    5,    6,
     1105, 1094,   20, 1114,    6, 1099, 1105, 1097, 1144, 1144,
     1110,   19, 1166,    0,   63, 1093, 1106, 1091, 1090, 1088,
     1098, 1166, 1103, 1088,   22,   23, 1088,   23, 1098,   37,
     1083, 1089, 1081, 1096,    0,    0,    0,    0,    0,    0,
        0,    0, 1166,    0,    0,    0,    0,    0,   27, 1126,
     1080, 1079, 1090, 1121, 1120, 1065, 1079, 1117, 1069, 1079,
     1063, 1166, 1166,   85, 1073, 1166, 1166, 1166,   73, 1166,

     1166,   83, 1060, 1062, 1062, 1058, 1166, 1059,   90,   93,
     1089, 1088, 1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080,
     1079, 1078, 1077,  102,  120, 1095, 1063, 1043, 1037, 1050,
     1056, 1079, 1035, 1037, 1085,   10,  130, 1034, 1166, 1166,
     1038, 1032, 1031, 1030, 1029, 1034,  138, 1059, 1058, 1057,
     1056, 1055, 1054, 1053, 1052, 1051, 1050, 1049, 1048, 1047,
     1020, 1019, 1052, 1053, 1014, 1010, 1022, 1048, 1024, 1054,
      124,  123, 1054, 1009, 1003, 1166, 1166, 1012, 1011, 1166,
        0, 1005, 1166, 1004, 1047,  995, 1045, 1044, 1034,  988,
     1041, 1040,  114,  135,    1,  991, 1006,  991, 1004,  984,

      998,  988,  129, 1166, 1017, 1166, 1166, 1010,   10,  116,
     1166, 1166,  976,  981,  981,  973, 1026, 1024,  995,  153,
      146,  145,  987,  977,  976,  980,  970,  982,  968,  970,
      969, 1166,  993,  133, 1166,  150,  967, 1012,  971,  964,
      980, 1008,  961,  167,  177,  170, 1006, 1001, 1000,  960,
      952,  966,  966,  967,  947,  976,  166,  151,  155,  945,
      960,  944,  942,  946,  962,  939,  178,  192,  188,  939,
      938,  937,  950,  985,  984,  949,  932,  936,  927,  939,
      928,  928,  976,  927,  940,  973,  921,  925,  970,  201,
      196,  193,  923,  968,  967,  931,  916,  914,  927,  962,

      911,  945,  925,  922,  918,  907,  955,  903,  919,  952,
      951,  214,  904,  911,  914,  947,  910,  899,  895,  909,
      942, 1166,  909,  908,  939,  899,  900,  936,  903,  220,
      207,  934,  933,  886,  885,  176,  894,  929,  879,  895,
      181,  881,  881,  891,  877,  886,  889,  875,   33,  202,
      223,  883,  918,  872,  864,  869,  914,  224,  876,  867,
      862,  874,  864,  859,  864,  855,  869,  856,  858,  902,
      901,  227,  847,  859,  848,  857,  896,  863,  851,  841,
      841,  846,  890,  852,  842,  879,  854,  842,  841,  847,
      836,  260,  234,  881,  841,  834,  830,  833,  842,  875,

      834,  833,  829,  825,  820,  818,  818,  867,  832,  830,
      864,  863,  812,  235,  228,  236,  829,  810,  813,  814,
      814,  821,  811,  810,  810,  802,  805,  801,  849,  802,
      805,  846,  795,  807,  843,  842,  254,  261,  790,  794,
      796,  798,  797,  800,  802,  834,  779,  832,  785,  794,
      791,  780,  818,  788,  779,  784,  785,  262,  822,  275,
      772,  820,  819,  773,  773,  771,  815,  764,  813,  776,
      811,  761,  763,  808,  798,  770,  759,  766,  757,  279,
      240,  802,  751,  765,  745,  760,  764,  747,  745,  242,
      744,  748,  743,  791,  790,  737,  779,  737,  786,  746,

      784,  282,  290,  292,  747,  746,  735,  780,  779,  742,
      731,  740,  775,  726,  723,  736,  721,  720,  730, 1166,
      768,  719,  716,  715,  294,  291,  295,  729,  727,  711,
      711,  710,  759,  758,  709,  718,  701,  718,  708,  706,
      712,  718,  703,  712,  707,  707,  297,  298,  299,  301,
      698,  696,  704,  703,  704,  702,  703,  692,  737,  688,
      686,  734,  701,  682,  686,  687,  684,  692,  302,  303,
      306,  677, 1166,  726,  725,  688,  687,  676,  675,  711,
      719,  668,  717,  676,  678,  664,  694,  712,  679,  672,
      661,  304,  308,  312,  662,  655,  662,  657,  656,  665,

      702, 1166,  651,  654,  649,  665,  651,  696, 1166,  641,
      641,  693,  656,  691,  690,  315,  689,  656,  641,  650,
      649,  684,  633,  643,  681,  641,  636,  635,  625,  630,
      639,  637,  673,  314,  672,  623,  620,  618,  659,  667,
      634,  626,  628,  630,  622,   38,   58,   93,  144,  182,
      271,  270,  319,  320,  284,  289,  284, 1166,  298,  284,
      300,  290,  291,  295,  346,  301,  294,  301,  351,  304,
      313,  354,  355,  321,  309,  308,  315,  315,  314,  328,
      330,  367,  320,  319,  363,  373,  325,  376,  342,  378,
      379,  344,  380,  381,  348,  333,  349,  377,  355,  341,

      343,  390,  382,  355,  347,  340,  355,  396,  397,  389,
     1166, 1166,  399,  355,  393, 1166,  361,  361,  406,  353,
      399,  373,  410,  365,  367,  413,  414, 1166,  378,  381,
     1166,  417,  386,  387,  374, 1166,  385,  387,  372,  386,
      425,  426,  395,  428,  379,  397,  382,  382,  384,  389,
      388,  436,  438,  439,  397,  388,  404,  408,  396,  399,
      448,  450,  451, 1166,  452,  453,  411,  409,  408,  448,
      422,  460,  427,  415,  423,  467,  468,  469,  419,  425,
     1166,  428,  428,  436,  438,  438,  479,  480,  446,  473,
      432,  437,  437,  438,  455,  452,  490,  491,  446,  484,

      456,  445,  461,  448,  448,  463,  500,  501,  450,  494,
      465,  505,  470,  457,  499,  508,  510,  511,  467, 1166,
      513,  465,  467,  499,  510, 1166,  521,  520,  514,  473,
      473,  477, 1166, 1166,  527,  528,  531,  493,  499,  534,
      536,  538,  500,  504,  502, 1166,  542,  543,  493,  546,
      547,  548,  550,  503,  512,  522,  555,  556,  507,  524,
      559,  562,  564,  525,  530,  530,  570,  572,  528,  565,
      539,  577,  578,  541, 1166,  548,  581,  583,  584,  535,
      586,  587,  534,  580,  591,  590,  546, 1166,  595,  593,
      543,  596,  602,  551,  607,  600,  554,  604,  609,  575,

      612,  615,  571,  617,  581,  611, 1166, 1166,  653,  655,
      657,  625,  626,  629,  630,  632,  637,  638,  641,  645,
      646,  650,  651,  659,  660,  662,  663,  664,  665
    } ;

static yyconst flex_int16_t yy_def[930] =
    {   0,
      909,  909,  910,  910,    2,    5,  911,  911,    2,    9,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  912,  913,  914,  915,  916,  917,
      918,  919,  908,  920,  921,  922,  923,  924,  908,  925,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,

      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      912,  913,  914,  915,  916,  917,  918,  919,  920,  921,
      922,  923,  924,  908,  908,  925,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  912,  913,  914,
      915,  916,  917,  918,  919,  920,  921,  922,  923,  924,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      926,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      927,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  926,  926,  926,  926,  908,  908,  908,  908,  908,

      908,  908,  908,  908,  908,  908,  908,  928,  928,  928,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  926,
      926,  926,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  929,  929,  908,  929,  908,  908,  908,  908,
      908,  908,  908,  926,  926,  926,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  926,  926,  926,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  926,
      926,  926,  908,  908,  908,  908,  908,  908,  908,  908,

      908,  908,  908,  908,  908,  908,  908,  908,  908,  926,
      926,  926,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  926,
      926,  926,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  926,  926,
      926,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  926,
      926,  926,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  926,  926,  926,  908,  908,  908,  908,  908,  908,

      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  926,  926,  926,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  926,  926,  926,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  926,  926,  926,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  926,
      926,  926,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,

      908,  926,  926,  926,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  926,  926,  926,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  926,  926,  926,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  926,  926,
      926,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  926,  926,  926,  908,  908,  908,  908,  908,  908,

      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  926,  926,  926,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  926,  926,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  926,  926,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  926,  926,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  926,
      926,  908,  908,  908,  908,  908,  908,  908,  908,  908,

      908,  908,  908,  908,  908,  908,  908,  926,  926,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  926,  926,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      926,  926,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  926,  926,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  926,  926,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  926,  926,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  926,  926,  908,  908,
      908,  908,  908,  908,  908,  908,  926,  926,  908,  908,

      908,  908,  908,  908,  908,  908,  926,  926,  908,  908,
      908,  908,  908,  908,  908,  908,  926,  926,  908,  908,
      908,  908,  908,  908,  908,  908,  926,  926,  908,  908,
      908,  908,  908,  908,  926,  926,  908,  908,  908,  908,
      926,  926,  908,  908,  908,  908,  926,  926,  908,  908,
      908,  926,  926,  908,  908,  908,  926,  926,  908,  908,
      908,  926,  926,  908,  908,  908,  926,  926,  908,  908,
      908,  926,  926,  908,  908,  908,  926,  926,  908,  908,
      926,  926,  908,  908,  926,  926,  908,  908,  926,  926,
      908,  926,  926,  908,  926,  926,  908,  926,  926,  908,

      926,  926,  908,  926,  908,  908,  908,    0,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908
    } ;

static yyconst flex_int16_t yy_nxt[1227] =
    {   0,
      908,  908,  209,   13,  908,  193,  908,  908,  908,  908,
      908,  235,  100,  100,  172,   14,   15,   14,   16,   81,
       82,   81,   82,  908,   17,  210,   18,   19,   20,   21,
       22,   98,   98,   23,   13,  234,   87,  193,   81,   82,
       99,  222,   87,  124,  125,  124,   14,   15,   14,   16,
       88,   80,   80,   80,   80,   17,   88,   18,   19,   20,
       21,   22,  173,   84,   23,   25,   26,   27,   85,   84,
       80,   80,   84,   87,   85,  101,  101,   85,  665,   28,
       29,   28,   30,  370,  102,  139,  139,   88,   31,   32,
       33,   34,   35,   36,   37,  140,  140,   38,   25,   26,

       27,  124,  137,  124,  146,  666,  124,  124,  124,  124,
      147,  124,   28,   29,   28,   30,  161,  161,  193,  161,
      161,   31,   32,   33,   34,   35,   36,   37,  193,  667,
       38,   39,   40,   41,  161,  161,  162,  161,  161,  193,
       42,  234,   43,   43,  161,  161,  174,  161,  161,  193,
      193,   44,  161,  161,  182,  161,  161,  193,  257,  196,
      194,  197,  198,  195,  199,   45,  230,  220,  200,   46,
       47,  193,  201,  236,  193,  257,  279,  231,  202,   48,
      279,  193,  193,   49,  245,   50,   51,   12,  221,   53,
      258,  279,  193,  244,  259,  281,  193,  193,  246,  668,

      193,   54,   55,   54,   56,  193,  193,  267,  269,  282,
       57,  193,   58,   59,   60,   61,   62,  268,  193,   63,
       12,  669,   53,  280,  193,  361,  290,  193,  292,  355,
      356,  193,  193,  362,   54,   55,   54,   56,  193,  193,
      193,  291,  312,   57,  193,   58,   59,   60,   61,   62,
      311,  350,   63,   64,  310,  371,   65,   66,  193,   67,
      220,   68,  379,   69,  193,  193,  193,  372,  332,   70,
       71,   72,   73,  220,  349,  436,  220,  380,  437,  193,
      394,   74,   75,  193,   76,  512,  193,  220,  415,  220,
      438,   77,  513,  503,  193,  193,  193,  414,  193,  193,

      480,  193,  193,  193,  459,  572,  193,  193,  193,   78,
      193,  460,  193,  220,  573,  220,  193,  614,  193,  193,
      615,  670,  671,  193,  193,  482,  502,  635,  674,  675,
      244,  548,  525,  676,  677,  244,  678,  569,  570,  571,
      679,  592,  680,  681,  526,  527,  594,  547,  682,  549,
      683,  684,  685,  686,  593,  687,  688,  689,  193,  193,
      692,  693,  694,  616,  695,  696,  697,  220,  698,  672,
      699,  700,  653,  220,  701,  702,  703,  704,  673,  705,
      706,  707,  708,  193,  710,  711,  712,  713,  714,  715,
      716,  717,  718,  719,  720,  721,  722,  723,  724,  725,

      193,  727,  728,  729,  730,  691,  731,  732,  733,  690,
      734,  735,  736,  737,  738,  739,  740,  193,  193,  743,
      744,  745,  746,  747,  748,  749,  750,  751,  752,  193,
      193,  755,  756,  757,  709,  758,  759,  760,  761,  762,
      763,  764,  193,  193,  767,  726,  768,  769,  770,  220,
      771,  772,  773,  741,  774,  775,  776,  193,  778,  779,
      780,  781,  782,  742,  783,  753,  754,  220,  784,  785,
      786,  193,  788,  789,  790,  791,  792,  765,  793,  766,
      794,  795,  796,  193,  193,  799,  800,  801,  802,  803,
      804,  805,  777,  806,  807,  193,  809,  810,  811,  812,

      813,  814,  815,  816,  193,  818,  819,  820,  821,  822,
      823,  824,  825,  826,  193,  193,  829,  830,  831,  832,
      220,  787,  833,  834,  193,  193,  837,  838,  839,  797,
      840,  193,  193,  220,  798,  843,  844,  845,  817,  846,
      193,  808,  193,  849,  850,  851,  852,  193,  854,  828,
      855,  856,  193,  220,  858,  859,  860,  827,  861,  193,
      193,  864,  865,  866,  220,  835,  867,  836,  193,  869,
      870,  871,  842,  847,  193,  841,  873,  874,  875,  876,
      853,  193,  193,  879,  880,  881,  848,  193,  883,  884,
      193,  886,  887,  888,  193,  193,  891,  193,  894,  193,

      193,  220,  857,  897,  193,  862,  193,  900,  193,  220,
      863,  193,  872,  193,  868,  903,  193,  901,  905,  193,
      878,  193,  906,  220,  907,  111,  112,  877,  904,  113,
      114,  220,  115,  882,  889,  892,  893,  116,  117,  220,
      885,  118,  896,  220,  890,  119,  120,  898,  895,  902,
      121,  122,  899,   12,   12,   24,   24,   52,   52,  123,
      126,  126,  192,  208,  233,  256,  664,  663,  662,  661,
      660,  659,  658,  657,  656,  655,  654,  652,  651,  650,
      649,  648,  647,  646,  645,  644,  643,  642,  641,  640,
      639,  638,  637,  636,  634,  193,  633,  632,  631,  630,

      629,  628,  627,  626,  625,  624,  623,  622,  621,  620,
      619,  618,  617,  613,  612,  611,  610,  609,  608,  607,
      606,  605,  604,  603,  602,  601,  600,  599,  598,  597,
      596,  595,  591,  590,  589,  588,  587,  586,  585,  584,
      583,  582,  581,  580,  579,  578,  577,  576,  575,  574,
      568,  567,  566,  565,  564,  563,  562,  561,  560,  559,
      558,  557,  556,  555,  554,  553,  552,  551,  550,  546,
      545,  544,  543,  542,  541,  540,  539,  538,  537,  536,
      535,  534,  533,  532,  531,  530,  529,  528,  524,  523,
      522,  521,  520,  519,  518,  517,  516,  515,  514,  511,

      510,  509,  508,  507,  506,  505,  504,  501,  500,  499,
      498,  497,  496,  495,  494,  493,  492,  491,  490,  489,
      488,  487,  486,  485,  484,  483,  481,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  468,  467,
      466,  465,  464,  463,  462,  461,  458,  457,  456,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  440,  439,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  425,  424,  423,  422,
      421,  420,  419,  418,  417,  416,  413,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  403,  402,  401,  400,

      399,  398,  397,  396,  395,  393,  392,  391,  390,  389,
      388,  387,  386,  385,  384,  383,  382,  381,  378,  377,
      376,  375,  374,  373,  369,  368,  367,  366,  365,  364,
      363,  360,  359,  358,  357,  354,  353,  352,  351,  348,
      347,  346,  345,  344,  343,  342,  341,  340,  339,  338,
      337,  336,  335,  334,  333,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,
      316,  315,  314,  313,  309,  308,  307,  306,  305,  304,
      303,  302,  282,  281,  280,  301,  300,  299,  298,  297,
      296,  295,  294,  293,  289,  288,  287,  286,  285,  284,

      283,  279,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  266,  265,  264,  263,  262,  261,  260,  257,  255,
      254,  253,  252,  251,  250,  249,  248,  247,  243,  242,
      241,  240,  239,  238,  237,  234,  232,  229,  228,  227,
      226,  225,  224,  223,  193,  219,  218,  217,  216,  215,
      214,  213,  212,  211,  207,  206,  205,  204,  203,  191,
      190,  189,  188,  187,  186,  185,  184,  183,   80,  160,
      159,  158,  157,  156,  155,  154,  153,  152,  151,  150,
      149,  148,  181,  180,  179,  178,  177,  176,  175,  171,
      170,  169,  168,  167,  166,  165,  164,  163,  127,  160,

      159,  158,  157,  156,  155,  154,  153,  152,  151,  150,
      149,  148,  145,  144,  143,  142,  141,  138,  136,  135,
      134,  133,  132,  131,  130,  129,  128,   80,   80,  127,
      110,   91,   90,   89,   86,   83,   80,  109,  108,  107,
      106,  105,  104,  103,   94,   97,   96,   91,   90,   89,
       86,   95,   83,   80,   94,   93,   92,   91,   90,   89,
       86,   83,   80,   79,  908,   11,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,

      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908
    } ;

static yyconst flex_int16_t yy_chk[1227] =
    {   0,
        0,    0,  181,    1,    0,  195,    0,    0,    0,    0,
        0,  209,   44,   44,  136,    1,    1,    1,    1,   15,
       16,   29,   30,    0,    1,  181,    1,    1,    1,    1,
        1,   42,   42,    1,    2,  209,   20,  349,   55,   56,
       42,  195,   35,   79,   79,   79,    2,    2,    2,    2,
       20,   15,   16,   29,   30,    2,   35,    2,    2,    2,
        2,    2,  136,   18,    2,    3,    3,    3,   18,   33,
       55,   56,   58,   60,   33,   45,   45,   58,  646,    3,
        3,    3,    3,  349,   45,   99,   99,   60,    3,    3,
        3,    3,    3,    3,    3,  102,  102,    3,    4,    4,

        4,   94,   94,   94,  109,  647,  109,  109,  109,  110,
      110,  110,    4,    4,    4,    4,  124,  124,  193,  124,
      124,    4,    4,    4,    4,    4,    4,    4,  171,  648,
        4,    5,    5,    5,  125,  125,  125,  125,  125,  194,
        5,  210,    5,    5,  137,  137,  137,  137,  137,  222,
      221,    5,  147,  147,  147,  147,  147,  220,  234,  172,
      171,  172,  172,  171,  172,    5,  203,  193,  172,    5,
        5,  244,  172,  210,  246,  236,  258,  203,  172,    5,
      259,  245,  267,    5,  221,    5,    5,    7,  194,    7,
      234,  257,  269,  220,  236,  258,  268,  292,  222,  649,

      291,    7,    7,    7,    7,  290,  350,  244,  246,  259,
        7,  331,    7,    7,    7,    7,    7,  245,  312,    7,
        8,  650,    8,  257,  330,  341,  267,  351,  269,  336,
      336,  372,  415,  341,    8,    8,    8,    8,  393,  414,
      416,  268,  292,    8,  481,    8,    8,    8,    8,    8,
      291,  331,    8,    9,  290,  350,    9,    9,  437,    9,
      331,    9,  358,    9,  392,  438,  458,  351,  312,    9,
        9,    9,    9,  330,  330,  414,  351,  358,  415,  460,
      372,    9,    9,  480,    9,  490,  502,  393,  393,  416,
      416,    9,  490,  481,  503,  526,  504,  392,  525,  527,

      458,  547,  548,  549,  437,  550,  569,  570,  592,    9,
      571,  438,  593,  392,  550,  458,  594,  592,  634,  616,
      593,  651,  652,  653,  654,  460,  480,  616,  655,  656,
      503,  526,  502,  657,  659,  527,  660,  547,  548,  549,
      661,  569,  662,  663,  503,  504,  571,  525,  664,  527,
      665,  666,  667,  668,  570,  669,  670,  671,  672,  673,
      674,  675,  676,  594,  677,  678,  679,  634,  680,  653,
      681,  682,  634,  654,  683,  684,  685,  686,  654,  687,
      688,  689,  690,  691,  692,  693,  694,  695,  696,  697,
      698,  699,  700,  701,  702,  703,  704,  705,  706,  707,

      708,  709,  710,  713,  714,  673,  715,  717,  718,  672,
      719,  720,  721,  722,  723,  724,  725,  726,  727,  729,
      730,  732,  733,  734,  735,  737,  738,  739,  740,  741,
      742,  743,  744,  745,  691,  746,  747,  748,  749,  750,
      751,  752,  753,  754,  755,  708,  756,  757,  758,  708,
      759,  760,  761,  726,  762,  763,  765,  766,  767,  768,
      769,  770,  771,  727,  772,  741,  742,  727,  773,  774,
      775,  776,  777,  778,  779,  780,  782,  753,  783,  754,
      784,  785,  786,  787,  788,  789,  790,  791,  792,  793,
      794,  795,  766,  796,  797,  798,  799,  800,  801,  802,

      803,  804,  805,  806,  807,  808,  809,  810,  811,  812,
      813,  814,  815,  816,  817,  818,  819,  821,  822,  823,
      776,  776,  824,  825,  828,  827,  829,  830,  831,  787,
      832,  835,  836,  788,  788,  837,  838,  839,  807,  840,
      841,  798,  842,  843,  844,  845,  847,  848,  849,  818,
      850,  851,  852,  807,  853,  854,  855,  817,  856,  857,
      858,  859,  860,  861,  818,  827,  862,  828,  863,  864,
      865,  866,  836,  841,  867,  835,  868,  869,  870,  871,
      848,  872,  873,  874,  876,  877,  842,  878,  879,  880,
      881,  882,  883,  884,  886,  885,  887,  890,  891,  889,

      892,  852,  852,  894,  896,  857,  893,  897,  898,  858,
      858,  895,  867,  899,  863,  900,  901,  898,  903,  902,
      873,  904,  905,  867,  906,  912,  913,  872,  902,  914,
      915,  873,  916,  878,  885,  889,  890,  917,  918,  881,
      881,  919,  893,  886,  886,  920,  921,  895,  892,  899,
      922,  923,  896,  909,  909,  910,  910,  911,  911,  924,
      925,  925,  926,  927,  928,  929,  645,  644,  643,  642,
      641,  640,  639,  638,  637,  636,  635,  633,  632,  631,
      630,  629,  628,  627,  626,  625,  624,  623,  622,  621,
      620,  619,  618,  617,  615,  614,  613,  612,  611,  610,

      608,  607,  606,  605,  604,  603,  601,  600,  599,  598,
      597,  596,  595,  591,  590,  589,  588,  587,  586,  585,
      584,  583,  582,  581,  580,  579,  578,  577,  576,  575,
      574,  572,  568,  567,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  555,  554,  553,  552,  551,
      546,  545,  544,  543,  542,  541,  540,  539,  538,  537,
      536,  535,  534,  533,  532,  531,  530,  529,  528,  524,
      523,  522,  521,  519,  518,  517,  516,  515,  514,  513,
      512,  511,  510,  509,  508,  507,  506,  505,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  489,

      488,  487,  486,  485,  484,  483,  482,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  468,  467,
      466,  465,  464,  463,  462,  461,  459,  457,  456,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  440,  439,  436,  435,  434,  433,
      432,  431,  430,  429,  428,  427,  426,  425,  424,  423,
      422,  421,  420,  419,  418,  417,  413,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  403,  402,  401,  400,
      399,  398,  397,  396,  395,  394,  391,  390,  389,  388,
      387,  386,  385,  384,  383,  382,  381,  380,  379,  378,

      377,  376,  375,  374,  373,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  357,  356,
      355,  354,  353,  352,  348,  347,  346,  345,  344,  343,
      342,  340,  339,  338,  337,  335,  334,  333,  332,  329,
      328,  327,  326,  325,  324,  323,  321,  320,  319,  318,
      317,  316,  315,  314,  313,  311,  310,  309,  308,  307,
      306,  305,  304,  303,  302,  301,  300,  299,  298,  297,
      296,  295,  294,  293,  289,  288,  287,  286,  285,  284,
      283,  282,  281,  280,  279,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  266,  265,  264,  263,  262,  261,

      260,  256,  255,  254,  253,  252,  251,  250,  249,  248,
      247,  243,  242,  241,  240,  239,  238,  237,  233,  231,
      230,  229,  228,  227,  226,  225,  224,  223,  219,  218,
      217,  216,  215,  214,  213,  208,  205,  202,  201,  200,
      199,  198,  197,  196,  192,  191,  190,  189,  188,  187,
      186,  185,  184,  182,  179,  178,  175,  174,  173,  170,
      169,  168,  167,  166,  165,  164,  163,  162,  161,  160,
      159,  158,  157,  156,  155,  154,  153,  152,  151,  150,
      149,  148,  146,  145,  144,  143,  142,  141,  138,  135,
      134,  133,  132,  131,  130,  129,  128,  127,  126,  123,

      122,  121,  120,  119,  118,  117,  116,  115,  114,  113,
      112,  111,  108,  106,  105,  104,  103,   95,   91,   90,
       89,   88,   87,   86,   85,   84,   83,   82,   81,   80,
       64,   63,   62,   61,   59,   57,   54,   53,   51,   50,
       49,   48,   47,   46,   41,   40,   39,   38,   37,   36,
       34,   32,   31,   28,   27,   26,   25,   23,   22,   21,
       19,   17,   14,   13,   11,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,

      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "mud.lex"
#define INITIAL 0
#line 2 "mud.lex"
#define MUD
#include "Lexer.h"
#undef MUD

/* the codes are octal, so \33 is \27 in decimal and <ESC> in literal*/
#define DESC 1

#define EXITS 2

#define ROOMNAME 3

#define PROMPT 4

#line 1094 "lex.mud.c"
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */

/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#ifndef YY_NO_UNISTD_H
#include <unistd.h>
#endif /* !YY_NO_UNISTD_H */

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */
#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */
#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */
#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PARAMS(( char *, yyconst char *, int YY_PROTO_LAST_ARG));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PARAMS(( yyconst char * YY_PROTO_LAST_ARG));
#endif

#ifndef YY_NO_INPUT
#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */
#endif


#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */
#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
/* end tables serialization structures and prototypes */

#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 27 "mud.lex"
#define YY_TABLES_VERIFY 0



#line 1216 "lex.mud.c"


	if ( YY_G(yy_init) )
		{
		YY_G(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

#ifdef YY_USES_REJECT
        if ( ! YY_G(yy_state_buf) )
            YY_G(yy_state_buf) = (yy_state_type *)yyalloc(YY_BUF_SIZE + 2  YY_CALL_LAST_ARG);
#endif

		if ( ! YY_G(yy_start) )
			YY_G(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_G(yy_current_buffer) )
			YY_G(yy_current_buffer) =
				yy_create_buffer( yyin, YY_BUF_SIZE YY_CALL_LAST_ARG);

		yy_load_buffer_state( YY_CALL_ONLY_ARG );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = YY_G(yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = YY_G(yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = YY_G(yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				YY_G(yy_last_accepting_state) = yy_current_state;
				YY_G(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 909 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1166 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = YY_G(yy_last_accepting_cpos);
			yy_current_state = YY_G(yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

#ifdef YY_USE_LINENO
		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}
#endif

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = YY_G(yy_hold_char);
			yy_cp = YY_G(yy_last_accepting_cpos);
			yy_current_state = YY_G(yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 30 "mud.lex"
BEGIN(ROOMNAME);
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 32 "mud.lex"
/* throw away some message in other colors*/
	YY_BREAK
case 3:
#line 34 "mud.lex"
case 4:
YY_RULE_SETUP
#line 34 "mud.lex"
skipSomeProperties(); BEGIN(PROMPT);
	YY_BREAK
case 5:
#line 37 "mud.lex"
case 6:
#line 38 "mud.lex"
case 7:
#line 39 "mud.lex"
case 8:
#line 40 "mud.lex"
case 9:
#line 41 "mud.lex"
case 10:
#line 42 "mud.lex"
case 11:
#line 43 "mud.lex"
case 12:
#line 44 "mud.lex"
case 13:
#line 45 "mud.lex"
case 14:
#line 46 "mud.lex"
case 15:
#line 47 "mud.lex"
case 16:
#line 48 "mud.lex"
case 17:
#line 49 "mud.lex"
case 18:
#line 50 "mud.lex"
case 19:
#line 51 "mud.lex"
case 20:
#line 52 "mud.lex"
case 21:
#line 53 "mud.lex"
case 22:
#line 54 "mud.lex"
case 23:
#line 55 "mud.lex"
case 24:
#line 56 "mud.lex"
case 25:
#line 57 "mud.lex"
case 26:
YY_RULE_SETUP
#line 57 "mud.lex"
pushEvent(MOVE_FAIL); BEGIN(INITIAL);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 59 "mud.lex"
append(YYText()[0]);
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 60 "mud.lex"
pushProperty(); BEGIN(DESC);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 61 "mud.lex"
pushProperty(); skipProperty(); BEGIN(EXITS);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 63 "mud.lex"
append(YYText()[0]);
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 64 "mud.lex"
clearProperty();
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 65 "mud.lex"
pushProperty();
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 66 "mud.lex"
clearProperty(); BEGIN(EXITS);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 69 "mud.lex"
skipSomeProperties(); pushEvent(ROOM); BEGIN(ROOMNAME);
	YY_BREAK
case 35:
#line 73 "mud.lex"
case 36:
#line 74 "mud.lex"
case 37:
#line 75 "mud.lex"
case 38:
#line 76 "mud.lex"
case 39:
#line 77 "mud.lex"
case 40:
YY_RULE_SETUP
#line 77 "mud.lex"
append(YYText()[0]);
	YY_BREAK
case 41:
#line 79 "mud.lex"
case 42:
YY_RULE_SETUP
#line 79 "mud.lex"
pushOptional();
	YY_BREAK
case 43:
#line 81 "mud.lex"
case 44:
YY_RULE_SETUP
#line 81 "mud.lex"
append(YYText()[1]); pushOptional();
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 82 "mud.lex"
append(YYText()[0]); pushProperty();
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 83 "mud.lex"
pushProperty();
	YY_BREAK
case 47:
/* rule 47 can match eol */
#line 85 "mud.lex"
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 85 "mud.lex"
BEGIN(PROMPT);
	YY_BREAK
case 49:
#line 88 "mud.lex"
case 50:
#line 89 "mud.lex"
case 51:
#line 90 "mud.lex"
case 52:
#line 91 "mud.lex"
case 53:
#line 92 "mud.lex"
case 54:
#line 93 "mud.lex"
case 55:
#line 94 "mud.lex"
case 56:
#line 95 "mud.lex"
case 57:
#line 96 "mud.lex"
case 58:
#line 97 "mud.lex"
case 59:
#line 98 "mud.lex"
case 60:
#line 99 "mud.lex"
case 61:
YY_RULE_SETUP
#line 99 "mud.lex"
append(YYText()[0]); markTerrain(); pushProperty(); pushEvent(ROOM); BEGIN(INITIAL);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 100 "mud.lex"
skipProperty(); pushEvent(ROOM); BEGIN(ROOMNAME);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 101 "mud.lex"
skipProperty(); pushEvent(ROOM); BEGIN(INITIAL);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 103 "mud.lex"
ECHO;
	YY_BREAK
#line 1514 "lex.mud.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(DESC):
case YY_STATE_EOF(EXITS):
case YY_STATE_EOF(ROOMNAME):
case YY_STATE_EOF(PROMPT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - YY_G(yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = YY_G(yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_G(yy_current_buffer)->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			YY_G(yy_n_chars) = YY_G(yy_current_buffer)->yy_n_chars;
			YY_G(yy_current_buffer)->yy_input_file = yyin;
			YY_G(yy_current_buffer)->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( YY_G(yy_c_buf_p) <= &YY_G(yy_current_buffer)->yy_ch_buf[YY_G(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			YY_G(yy_c_buf_p) = YY_G(yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( YY_CALL_ONLY_ARG );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state YY_CALL_LAST_ARG);

			yy_bp = YY_G(yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++YY_G(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = YY_G(yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( YY_CALL_ONLY_ARG ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				YY_G(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( YY_CALL_ONLY_ARG ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					YY_G(yy_c_buf_p) = YY_G(yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! YY_G(yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				YY_G(yy_c_buf_p) =
					YY_G(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( YY_CALL_ONLY_ARG );

				yy_cp = YY_G(yy_c_buf_p);
				yy_bp = YY_G(yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				YY_G(yy_c_buf_p) =
				&YY_G(yy_current_buffer)->yy_ch_buf[YY_G(yy_n_chars)];

				yy_current_state = yy_get_previous_state( YY_CALL_ONLY_ARG );

				yy_cp = YY_G(yy_c_buf_p);
				yy_bp = YY_G(yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */

#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete [] yy_state_buf;
	yyfree( yy_start_stack YY_CALL_LAST_ARG );
	yy_delete_buffer( yy_current_buffer YY_CALL_LAST_ARG);
	}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer  YY_CALL_LAST_ARG);
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  YY_CALL_LAST_ARG) YY_CALL_LAST_ARG);
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = YY_G(yy_current_buffer)->yy_ch_buf;
	register char *source = YY_G(yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( YY_G(yy_c_buf_p) > &YY_G(yy_current_buffer)->yy_ch_buf[YY_G(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_G(yy_current_buffer)->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( YY_G(yy_c_buf_p) - YY_G(yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (YY_G(yy_c_buf_p) - YY_G(yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_G(yy_current_buffer)->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_G(yy_current_buffer)->yy_n_chars = YY_G(yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_G(yy_current_buffer)->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_G(yy_current_buffer);

			int yy_c_buf_p_offset =
				(int) (YY_G(yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 YY_CALL_LAST_ARG );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			YY_G(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_G(yy_current_buffer)->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_G(yy_current_buffer)->yy_ch_buf[number_to_move]),
			YY_G(yy_n_chars), num_to_read );

		YY_G(yy_current_buffer)->yy_n_chars = YY_G(yy_n_chars);
		}

	if ( YY_G(yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  YY_CALL_LAST_ARG);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_G(yy_current_buffer)->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	YY_G(yy_n_chars) += number_to_move;
	YY_G(yy_current_buffer)->yy_ch_buf[YY_G(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_G(yy_current_buffer)->yy_ch_buf[YY_G(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	YY_G(yytext_ptr) = &YY_G(yy_current_buffer)->yy_ch_buf[0];

	return ret_val;
	}
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */

/* yy_get_previous_state - get the state just before the EOB char was reached */

#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */
    yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = YY_G(yy_start);

	for ( yy_cp = YY_G(yytext_ptr) + YY_MORE_ADJ; yy_cp < YY_G(yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			YY_G(yy_last_accepting_state) = yy_current_state;
			YY_G(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 909 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = YY_G(yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		YY_G(yy_last_accepting_state) = yy_current_state;
		YY_G(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 909 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 908);

	return yy_is_jam ? 0 : yy_current_state;
	}


    void yyFlexLexer::yyunput( int c, register char* yy_bp)
	{
	register char *yy_cp = YY_G(yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = YY_G(yy_hold_char);

	if ( yy_cp < YY_G(yy_current_buffer)->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = YY_G(yy_n_chars) + 2;
		register char *dest = &YY_G(yy_current_buffer)->yy_ch_buf[
					YY_G(yy_current_buffer)->yy_buf_size + 2];
		register char *source =
				&YY_G(yy_current_buffer)->yy_ch_buf[number_to_move];

		while ( source > YY_G(yy_current_buffer)->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_G(yy_current_buffer)->yy_n_chars =
			YY_G(yy_n_chars) = YY_G(yy_current_buffer)->yy_buf_size;

		if ( yy_cp < YY_G(yy_current_buffer)->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

#ifdef YY_USE_LINENO
    if ( c == '\n' )
        --yylineno;
#endif
	YY_G(yytext_ptr) = yy_bp;
	YY_G(yy_hold_char) = *yy_cp;
	YY_G(yy_c_buf_p) = yy_cp;
	}

    int yyFlexLexer::yyinput()

	{
	int c;

	*YY_G(yy_c_buf_p) = YY_G(yy_hold_char);

	if ( *YY_G(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( YY_G(yy_c_buf_p) < &YY_G(yy_current_buffer)->yy_ch_buf[YY_G(yy_n_chars)] )
			/* This was really a NUL. */
			*YY_G(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = YY_G(yy_c_buf_p) - YY_G(yytext_ptr);
			++YY_G(yy_c_buf_p);

			switch ( yy_get_next_buffer( YY_CALL_ONLY_ARG ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin YY_CALL_LAST_ARG);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( YY_CALL_ONLY_ARG ) )
						return EOF;

					if ( ! YY_G(yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(YY_CALL_ONLY_ARG);
#else
					return input(YY_CALL_ONLY_ARG);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					YY_G(yy_c_buf_p) = YY_G(yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) YY_G(yy_c_buf_p);	/* cast for 8-bit char's */
	*YY_G(yy_c_buf_p) = '\0';	/* preserve yytext */
	YY_G(yy_hold_char) = *++YY_G(yy_c_buf_p);


	return c;
	}

    void yyFlexLexer::yyrestart( std::istream* input_file )
	{
	if ( ! YY_G(yy_current_buffer) )
		YY_G(yy_current_buffer) =
            yy_create_buffer( yyin, YY_BUF_SIZE YY_CALL_LAST_ARG);

	yy_init_buffer( YY_G(yy_current_buffer), input_file YY_CALL_LAST_ARG);
	yy_load_buffer_state( YY_CALL_ONLY_ARG );
	}

    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( YY_G(yy_current_buffer) == new_buffer )
		return;

	if ( YY_G(yy_current_buffer) )
		{
		/* Flush out information for old buffer. */
		*YY_G(yy_c_buf_p) = YY_G(yy_hold_char);
		YY_G(yy_current_buffer)->yy_buf_pos = YY_G(yy_c_buf_p);
		YY_G(yy_current_buffer)->yy_n_chars = YY_G(yy_n_chars);
		}

	YY_G(yy_current_buffer) = new_buffer;
	yy_load_buffer_state( YY_CALL_ONLY_ARG );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	YY_G(yy_did_buffer_switch_on_eof) = 1;
	}


    void yyFlexLexer::yy_load_buffer_state()
	{
	YY_G(yy_n_chars) = YY_G(yy_current_buffer)->yy_n_chars;
	YY_G(yytext_ptr) = YY_G(yy_c_buf_p) = YY_G(yy_current_buffer)->yy_buf_pos;
	yyin = YY_G(yy_current_buffer)->yy_input_file;
	YY_G(yy_hold_char) = *YY_G(yy_c_buf_p);
	}

    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) YY_CALL_LAST_ARG );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( b->yy_buf_size + 2 YY_CALL_LAST_ARG );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file YY_CALL_LAST_ARG);

	return b;
	}

    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == YY_G(yy_current_buffer) )
		YY_G(yy_current_buffer) = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf YY_CALL_LAST_ARG );

	yyfree( (void *) b YY_CALL_LAST_ARG );
	}



#ifndef YY_NEVER_INTERACTIVE
extern "C" int isatty YY_PARAMS(( int ));
#endif
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

	{
	int oerrno = errno;

	yy_flush_buffer( b YY_CALL_LAST_ARG);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	errno = oerrno;
	}

    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_G(yy_current_buffer) )
		yy_load_buffer_state( YY_CALL_ONLY_ARG );
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
    void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( YY_G(yy_start_stack_ptr) >= YY_G(yy_start_stack_depth) )
		{
		yy_size_t new_size;

		YY_G(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = YY_G(yy_start_stack_depth) * sizeof( int );

		if ( ! YY_G(yy_start_stack) )
			YY_G(yy_start_stack) = (int *) yyalloc( new_size YY_CALL_LAST_ARG );

		else
			YY_G(yy_start_stack) = (int *) yyrealloc(
					(void *) YY_G(yy_start_stack), new_size YY_CALL_LAST_ARG );

		if ( ! YY_G(yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
    void yyFlexLexer::yy_pop_state()
	{
	if ( --YY_G(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr)]);
	}
#endif


#ifndef YY_NO_TOP_STATE
    int yyFlexLexer::yy_top_state()
	{
	return YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr) - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
	}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = YY_G(yy_hold_char); \
		YY_G(yy_c_buf_p) = yytext + yyless_macro_arg; \
		YY_G(yy_hold_char) = *YY_G(yy_c_buf_p); \
		*YY_G(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */





/* Internal utility routines. */

#ifndef yytext_ptr
static void yy_flex_strncpy YYFARGS3( char*,s1, yyconst char *,s2, int,n)
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YYFARGS1( yyconst char *,s)
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif

/* You may override yyalloc by defining YY_NO_FLEX_ALLOC and linking to
 * your own version */
#ifndef YY_NO_FLEX_ALLOC
void *yyalloc YYFARGS1( yy_size_t ,size)
	{
	return (void *) malloc( size );
	}
#endif

/* You may override yyrealloc by defining YY_NO_FLEX_REALLOC and linking
 * to your own version. */
#ifndef YY_NO_FLEX_REALLOC
void *yyrealloc  YYFARGS2( void *,ptr, yy_size_t ,size)
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}
#endif

/* You may override yyfree by defining YY_NO_FLEX_FREE and linking to
 * your own version.*/
#ifndef YY_NO_FLEX_FREE
void yyfree YYFARGS1( void *,ptr)
	{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
	}
#endif

#define YYTABLES_NAME "yytables"

#if YY_MAIN
int main YY_PARAMS((void));

int main ()
	{

	yylex();

	return 0;
	}
#endif
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */
#line 103 "mud.lex"
#ifndef MudIN_HEADER /* YY-DISCARD-FROM-HEADER */


/* we should also find things like "You skillfully discover a xy" or "The xy seems to be closed" in the initial state and drop a note on these*/
/* "You flee head over heels" should be transformed into a MOVE event without direction (which will be queued in the user queue by the parser), 
"flee" shouldn't generate an event on the user side*/
/*TODO: define mudLexer.append(), if possible use flex's own buffer and just move pointers around, append(int) appends only the i'th character*/
/*	mudLexer.pushProperty and mudLexer.pushOptional flush the buffer.*/
/*	matchCompleteRoom matches one room we believe to be fully specified, matchIncompleteRoom matches a description where the last parts are missing*/
/*	jumpProperty indicates that we left out one property, jumpLastProperty indicates that we left out all following but the last property */
/*		- this has to be represented in our search tree somehow so that we can match rooms with title and exits*/
/*	perhaps we should also drop a note in the current room if the user types "exits" or if he searches and finds a hidden exit*/
/*	markTerrain should tell the Room-Algorithm which property determines the terrain type for the rendering*/
#endif /* !MudIN_HEADER YY-END-DISCARD-FROM-HEADER */
