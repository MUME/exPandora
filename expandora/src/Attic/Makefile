#############################################################################
# Makefile for building: ../pandora
# Generated by qmake (2.00a) (Qt 4.0.1) on: Fri Dec 30 01:15:48 2005
# Project:  pandora.pro
# Template: app
# Command: /usr/bin/qmake -unix -o Makefile pandora.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
LEX           = flex
YACC          = yacc
DEFINES       = -DQT_NO_DEBUG -DQT_CORE_LIB -DQT_GUI_LIB -DQT_XML_LIB -DQT_OPENGL_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -march=athlon-xp -mtune=athlon-xp -pipe -pipe -D_REENTRANT -Wall -W $(DEFINES)
CXXFLAGS      = -pipe -O2 -march=athlon-xp -mtune=athlon-xp -pipe -pipe -D_REENTRANT -Wall -W $(DEFINES)
LEXFLAGS      = 
YACCFLAGS     = -d
INCPATH       = -I/usr/share/doc/qt-4.0.1/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtOpenGL -I/usr/include/qt4/QtXml -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtCore -I/usr/include/qt4 -I/usr/include -Imoc -I.
LINK          = g++
LFLAGS        = 
LIBS          = $(SUBLIBS) -L/usr/X11R6/lib -L/usr/lib/qt4 -L/usr/lib/mysql -L/usr/lib/qt4 -L/usr/X11R6/lib -lQtXml -lQtOpenGL -lGLU -lGL -lQtGui -lpng -lSM -lICE -lXi -lXrender -lXrandr -lXcursor -lfreetype -lfontconfig -lXext -lX11 -lm -lQtCore -lz -lpthread -ldl
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
INSTALL_FILE  = $(COPY_FILE)
INSTALL_DIR   = $(COPY_DIR)
DEL_FILE      = rm -f
SYMLINK       = ln -sf
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = obj/

####### Files

SOURCES       = auda.cpp \
		croom.cpp \
		configurator.cpp \
		dispatch.cpp \
		engine.cpp \
		event.cpp \
		exits.cpp \
		forwarder.cpp \
		interface.cpp \
		renderer.cpp \
		rooms.cpp \
		stacks.cpp \
		tree.cpp \
		userfunc.cpp \
		utils.cpp \
		xml2.cpp moc/moc_renderer.cpp
OBJECTS       = obj/auda.o \
		obj/croom.o \
		obj/configurator.o \
		obj/dispatch.o \
		obj/engine.o \
		obj/event.o \
		obj/exits.o \
		obj/forwarder.o \
		obj/interface.o \
		obj/renderer.o \
		obj/rooms.o \
		obj/stacks.o \
		obj/tree.o \
		obj/userfunc.o \
		obj/utils.o \
		obj/xml2.o \
		obj/moc_renderer.o
DIST          = /usr/share/doc/qt-4.0.1/mkspecs/qconfig.pri \
		/usr/share/doc/qt-4.0.1/mkspecs/features/qt_config.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/exclusive_builds.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/default_pre.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/release.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/default_post.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/unix/thread.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/warn_on.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/unix/opengl.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/qt.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/moc.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/resources.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/uic.prf \
		pandora.pro
QMAKE_TARGET  = pandora
DESTDIR       = ../
TARGET        = ../pandora

first: all
####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	@$(CHK_DIR_EXISTS) "../" || $(MKDIR) "../"
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: pandora.pro  /usr/share/doc/qt-4.0.1/mkspecs/linux-g++/qmake.conf /usr/share/doc/qt-4.0.1/mkspecs/qconfig.pri \
		/usr/share/doc/qt-4.0.1/mkspecs/features/qt_config.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/exclusive_builds.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/default_pre.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/release.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/default_post.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/unix/thread.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/warn_on.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/unix/opengl.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/qt.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/moc.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/resources.prf \
		/usr/share/doc/qt-4.0.1/mkspecs/features/uic.prf \
		/usr/lib/qt4/libQtCore.prl \
		/usr/lib/qt4/libQtGui.prl \
		/usr/lib/qt4/libQtXml.prl \
		/usr/lib/qt4/libQtOpenGL.prl
	$(QMAKE) -unix -o Makefile pandora.pro
/usr/share/doc/qt-4.0.1/mkspecs/qconfig.pri:
/usr/share/doc/qt-4.0.1/mkspecs/features/qt_config.prf:
/usr/share/doc/qt-4.0.1/mkspecs/features/exclusive_builds.prf:
/usr/share/doc/qt-4.0.1/mkspecs/features/default_pre.prf:
/usr/share/doc/qt-4.0.1/mkspecs/features/release.prf:
/usr/share/doc/qt-4.0.1/mkspecs/features/default_post.prf:
/usr/share/doc/qt-4.0.1/mkspecs/features/unix/thread.prf:
/usr/share/doc/qt-4.0.1/mkspecs/features/warn_on.prf:
/usr/share/doc/qt-4.0.1/mkspecs/features/unix/opengl.prf:
/usr/share/doc/qt-4.0.1/mkspecs/features/qt.prf:
/usr/share/doc/qt-4.0.1/mkspecs/features/moc.prf:
/usr/share/doc/qt-4.0.1/mkspecs/features/resources.prf:
/usr/share/doc/qt-4.0.1/mkspecs/features/uic.prf:
/usr/lib/qt4/libQtCore.prl:
/usr/lib/qt4/libQtGui.prl:
/usr/lib/qt4/libQtXml.prl:
/usr/lib/qt4/libQtOpenGL.prl:
qmake:  FORCE
	@$(QMAKE) -unix -o Makefile pandora.pro

dist: 
	@$(CHK_DIR_EXISTS) "obj/pandora1.0.0" || $(MKDIR) "obj/pandora1.0.0"
	$(COPY_FILE) --parents $(SOURCES) $(DIST) obj/pandora1.0.0/ && $(COPY_FILE) --parents configurator.h croom.h defines.h dispatch.h engine.h event.h exits.h forwarder.h renderer.h rooms.h stacks.h tree.h userfunc.h utils.h xml2.h obj/pandora1.0.0/ && $(COPY_FILE) --parents auda.cpp croom.cpp configurator.cpp dispatch.cpp engine.cpp event.cpp exits.cpp forwarder.cpp interface.cpp renderer.cpp rooms.cpp stacks.cpp tree.cpp userfunc.cpp utils.cpp xml2.cpp obj/pandora1.0.0/ && $(COPY_FILE) --parents configedit.ui patterndialog.ui roomedit.ui obj/pandora1.0.0/ && (cd `dirname obj/pandora1.0.0` && $(TAR) pandora1.0.0.tar pandora1.0.0 && $(COMPRESS) pandora1.0.0.tar) && $(MOVE) `dirname obj/pandora1.0.0`/pandora1.0.0.tar.gz . && $(DEL_FILE) -r obj/pandora1.0.0


yaccclean:
lexclean:
clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


/usr/bin/moc:
	(cd "$(QTDIR)/src/tools/moc" && $(MAKE))

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc/moc_renderer.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc/moc_renderer.cpp
moc/moc_renderer.cpp: defines.h \
		rooms.h \
		configurator.h \
		ui_roomedit.h \
		ui_configedit.h \
		ui_patterndialog.h \
		renderer.h \
		/usr/bin/moc
	/usr/bin/moc $(DEFINES) $(INCPATH) renderer.h -o moc/moc_renderer.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all:
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all: ui_configedit.h ui_patterndialog.h ui_roomedit.h
compiler_uic_clean:
	-$(DEL_FILE) ui_configedit.h ui_patterndialog.h ui_roomedit.h
ui_configedit.h: configedit.ui
	/usr/bin/uic configedit.ui -o ui_configedit.h

ui_patterndialog.h: patterndialog.ui
	/usr/bin/uic patterndialog.ui -o ui_patterndialog.h

ui_roomedit.h: roomedit.ui
	/usr/bin/uic roomedit.ui -o ui_roomedit.h

compiler_clean: compiler_moc_header_clean compiler_rcc_clean compiler_image_collection_clean compiler_moc_source_clean compiler_uic_clean 

####### Compile

obj/auda.o: auda.cpp defines.h \
		configurator.h \
		rooms.h \
		xml2.h \
		dispatch.h \
		renderer.h \
		ui_roomedit.h \
		ui_configedit.h \
		ui_patterndialog.h \
		event.h \
		stacks.h \
		forwarder.h \
		utils.h \
		engine.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/auda.o auda.cpp

obj/croom.o: croom.cpp croom.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/croom.o croom.cpp

obj/configurator.o: configurator.cpp defines.h \
		configurator.h \
		utils.h \
		engine.h \
		event.h \
		renderer.h \
		rooms.h \
		ui_roomedit.h \
		ui_configedit.h \
		ui_patterndialog.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/configurator.o configurator.cpp

obj/dispatch.o: dispatch.cpp defines.h \
		configurator.h \
		utils.h \
		tree.h \
		stacks.h \
		xml2.h \
		event.h \
		dispatch.h \
		engine.h \
		userfunc.h \
		forwarder.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/dispatch.o dispatch.cpp

obj/engine.o: engine.cpp renderer.h \
		defines.h \
		rooms.h \
		configurator.h \
		ui_roomedit.h \
		ui_configedit.h \
		ui_patterndialog.h \
		event.h \
		stacks.h \
		dispatch.h \
		exits.h \
		forwarder.h \
		utils.h \
		engine.h \
		tree.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/engine.o engine.cpp

obj/event.o: event.cpp defines.h \
		configurator.h \
		event.h \
		dispatch.h \
		stacks.h \
		forwarder.h \
		utils.h \
		engine.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/event.o event.cpp

obj/exits.o: exits.cpp rooms.h \
		defines.h \
		configurator.h \
		exits.h \
		dispatch.h \
		stacks.h \
		event.h \
		forwarder.h \
		utils.h \
		engine.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/exits.o exits.cpp

obj/forwarder.o: forwarder.cpp defines.h \
		configurator.h \
		dispatch.h \
		renderer.h \
		rooms.h \
		ui_roomedit.h \
		ui_configedit.h \
		ui_patterndialog.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/forwarder.o forwarder.cpp

obj/interface.o: interface.cpp defines.h \
		configurator.h \
		renderer.h \
		rooms.h \
		ui_roomedit.h \
		ui_configedit.h \
		ui_patterndialog.h \
		stacks.h \
		utils.h \
		userfunc.h \
		event.h \
		dispatch.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/interface.o interface.cpp

obj/renderer.o: renderer.cpp renderer.h \
		defines.h \
		rooms.h \
		configurator.h \
		ui_roomedit.h \
		ui_configedit.h \
		ui_patterndialog.h \
		stacks.h \
		utils.h \
		userfunc.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/renderer.o renderer.cpp

obj/rooms.o: rooms.cpp defines.h \
		configurator.h \
		rooms.h \
		utils.h \
		tree.h \
		stacks.h \
		dispatch.h \
		renderer.h \
		ui_roomedit.h \
		ui_configedit.h \
		ui_patterndialog.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/rooms.o rooms.cpp

obj/stacks.o: stacks.cpp renderer.h \
		defines.h \
		rooms.h \
		configurator.h \
		ui_roomedit.h \
		ui_configedit.h \
		ui_patterndialog.h \
		dispatch.h \
		forwarder.h \
		utils.h \
		stacks.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/stacks.o stacks.cpp

obj/tree.o: tree.cpp defines.h \
		utils.h \
		tree.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/tree.o tree.cpp

obj/userfunc.o: userfunc.cpp rooms.h \
		defines.h \
		configurator.h \
		dispatch.h \
		stacks.h \
		forwarder.h \
		utils.h \
		userfunc.h \
		xml2.h \
		event.h \
		engine.h \
		tree.h \
		renderer.h \
		ui_roomedit.h \
		ui_configedit.h \
		ui_patterndialog.h \
		exits.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/userfunc.o userfunc.cpp

obj/utils.o: utils.cpp defines.h \
		configurator.h \
		utils.h \
		forwarder.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/utils.o utils.cpp

obj/xml2.o: xml2.cpp defines.h \
		configurator.h \
		rooms.h \
		utils.h \
		dispatch.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/xml2.o xml2.cpp

obj/moc_renderer.o: moc/moc_renderer.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/moc_renderer.o moc/moc_renderer.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

